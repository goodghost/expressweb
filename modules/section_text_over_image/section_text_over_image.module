<?php
/**
 * @file
 * Code for the Section - text over image feature.
 */

include_once 'section_text_over_image.features.inc';

/**
* Implements hook_theme().
* This way content type uses theme file loacted in templates directory instead of default node.tpl.php file.
* Still it can be overriden by in theme directory.
*/
function section_text_over_image_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__section_text_over_image'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--section_text_over_image',
    'path' => drupal_get_path('module', 'section_text_over_image') . '/templates',
  );
  return $theme;
}

/**
* Implements hook_preprocess_hook().
*/
function section_text_over_image_preprocess_node(&$vars) {
  // Add CSS for section and complex page content types
  // This CSS is used only if LESS won't work for some reason
  // In fact section_text_over_image.less file is added to
  // style.less theme file and it compiles to styles.css
  // This way we can use bootstrap varaibles.
  if ($vars['type'] == 'section_text_over_image' || $vars['type'] == 'complex_page') {
    drupal_add_css(drupal_get_path('module', 'section_text_over_image') . '/css/section_text_over_image.css');
  }

  if ($vars['type'] == 'section_text_over_image') {
    // Set classes left, right or center depending on value of field_alignment
    $wrapper = entity_metadata_wrapper('node', $vars['node']);
    if ($wrapper->field_alignment->value() == '0') {
      $vars['classes_array'][] = 'left';
    } else if ($wrapper->field_alignment->value() == '1') {
      $vars['classes_array'][] = 'right';
    } else {
      $vars['classes_array'][] = 'center';
    }
    
    $vars['classes_array'][] = 'wow';
    $vars['classes_array'][] = 'fadeIn';
    // Display image as parallaxed version or static
    // For static version we render standard $vars['content']['filed_image'] array
    // For parallaxed version we need to create a div tag with specific attributes 
    // More info on this parallaxed script here https://github.com/pixelcog/parallax.js
    if ($wrapper->field_parallax->value() == '1') {
      $image = $wrapper->field_image->value();
      $variables = array(
        'element' => array(
          '#tag' => 'div',
          '#attributes' => array(
            'class' => array('parallax-window'),
            'data-parallax' => 'scroll',
            'data-image-src' => file_create_url($image['uri']),
          ),
        ),
      );
      $vars['image'] = theme('html_tag', $variables);
    } else {
      $vars['image'] = render($vars['content']['field_image']);
    }
  }
}

/**
* Implements hook_permission().
*/
function section_text_over_image_permission() {
  // Create permission options for alignment and parallax
  return array(
    'access alignment option' => array(
      'title' => t('Access alignment option'),
      'description' => t('Allow users use alignment option.'),
    ),

    'access parallax option' => array(
      'title' => t('Access parallax option'),
      'description' => t('Allow users use parallax option.'),
    ),

    'access style option' => array(
      'title' => t('Access style option'),
      'description' => t('Allow users use style option.'),
    ),
  );
}

/**
* Implements hook_field_access().
* You can dsm argument of this function on any node edit form
*/
function section_text_over_image_field_access($op, $field, $entity_type, $entity, $account) {
  //Field alignment access
  if ($field['field_name'] == 'field_alignment' && $op == 'edit') {
    if (user_access('access alignment option', $account)) {
      return TRUE;
    } else {
      return FALSE;
    }
  }

  //Field parallax access
  if ($field['field_name'] == 'field_parallax' && $op == 'edit') {
    if (user_access('access parallax option', $account)) {
      return TRUE;
    } else {
      return FALSE;
    }
  }

  //Field style access
  if ($field['field_name'] == 'field_image_style' && $op == 'edit') {
    if (user_access('access style option', $account)) {
      return TRUE;
    } else {
      return FALSE;
    }
  }
}